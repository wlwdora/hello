an ADT that used in list;
the code here;
#pragma once
template<class ts>class list
{
public:
	list(int Max_size = 20);
public:
	bool Isempty() {return length==0};
	void Showlist();
	auto Length() { return length };
	void destory();
	auto Serarch(ts &character) const;
	void Push_back(ts a);
	void Push_head(ts a);
	void Pop_back();
	void Pop_head();
	int insert_pos(ts pos, const ts &x);
	void insert_val(const ts &x);
	int delete_pos(ts pos, const ts &x);
	void delete_val(const ts &x);
	void clear();
	void reserv();
private:
	ts length;
	ts *base;
	int size;
};
template<class ts>
list<ts>::list(int Max_size)
{
	size = Max_size;
	base = new ts[size];
	length = 0;
}
template<class ts>
void list<ts>::Showlist()
{
	for (ts &x : base)
	{
		cout << x << ",";
	}
	cout << endl;                                                                                                                                                                                                                                                                                                                                                                                                                     
}
template<class ts>
void list<ts>::destory()
{
	delete base;
	base = NULL;
	size = 0;
	length = 0;
}
template<class ts>
auto list<ts>::Serarch(ts &character)const
{
	for (int i = 0; i < length; i++)
	{
		if (base[i] == character)
			return i;
	}
	return false;
}
template<class ts>
void list<ts>::Push_head(ts a)
{
	
	length++;
	for (int i = length-1; i >0; i--)
	{
		base[i] = base[i - 1];
	}
	base[0] = a;
}
template<class ts>
void list<ts>::Push_back(ts a)
{
	length++;
	for (int i = 0; i <length; i++)
	{
		base[i] = base[i+1];
	}
	base[length-1] = a;
}
template<class ts>
void list<ts>::void Pop_back()
{
	if (!Isempty())
	{
		length--;
		base[length] = NULL;
	}
}/*	bool Isempty() {return length==0};
	void Showlist();
	auto Length() { return length };
	void destory();
	auto Serarch(ts &character) const;
	void Push_back(ts a);
	void Push_head(ts a);
	void Pop_back();
	void Pop_head();
	int insert_pos(ts pos, const ts &x);
	int insert_val(const ts &x);
	void delete_pos(ts pos, const ts &x);
	void delete_val(const ts &x);
	void clear();
	void reserv();*/

template<class ts>
void list<ts>::Pop_head()
{
	if (!Isempty());
	{
		for (int i = 0; i < length; i++)
		{
			base[i] = base[i + 1];
		}
		length--;
	}
}
template<class ts>
int list<ts>::insert_pos(ts pos, const ts &x)
{
	if (pos > length)
	{
		return false;
	}
	for (int i = length; i > pos - 1; i--)
	{
		base[i] = base[i - 1];
	}
	base[pos - 1] = x;
	length++;
}
template<class ts>
void list<ts>::insert_val(const ts &x)
{
	base[length] = x;
	sort(base, base + length - 1);
	length++;
}
template<class ts>
int list<ts>::delete_pos(ts pos, const ts &x)
{
	if (pos >= length)
	{
		return false;
}
	for (int i = pos - 1; i < length; i++)
		{ 
		base[i] = base[i + 1];
	}
	length--;
	return 1;
}
template<class ts>
void list<ts>::delete_val(const ts &x)
{
	for (int i = 0; i < length; i++)
	{
		if (base[i] == x)
		{
			basep[i] = NULL;
			length--;
		}
	}
	sort(base, base + length - 1);
}
template<class ts>
void list<ts>::reserv()
{
	int i = 0;
	int m = size - 1;
	for (; i <= ((size - 1) / 2); ++i)
	{
		int tmp = base[i];
		base[i] = base[m];
		base[m] = tmp;
		m--;
	}
}
template<class ts>
void list<ts>::clear()
{
	for (ts &x : base)
	{
		x = NULL;
	}
}
